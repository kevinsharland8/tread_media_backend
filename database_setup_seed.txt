select * from events;
select * from event_types;
select * from event_images;
select * from event_distances;
select * from users;
select * from provinces;
select * from event_event_types_junction;
select * from errors;

delete from events;
delete from errors;

drop index idx_event_distances_event_id;
drop index idx_event_images_event_id;
drop index idx_events_event_type_id;

drop table event_types CASCADE;;
drop table event_images;
drop table event_distances;
-- drop table favorite_event;
-- drop table users;
drop table event_event_types_junction;
drop table events;
drop table provinces;
drop table errors;


-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.errors
(
    id serial NOT NULL,
    row_number integer NOT NULL,
    error character varying(500) COLLATE pg_catalog."default" NOT NULL,
    inserted boolean NOT NULL DEFAULT false,
    run_date timestamp without time zone NOT NULL,
    CONSTRAINT errors_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.event_distances
(
    id serial NOT NULL,
    event_id integer NOT NULL,
    day integer NOT NULL,
    distance integer NOT NULL,
    CONSTRAINT event_distances_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.event_event_types_junction
(
    id serial NOT NULL,
    event_id integer NOT NULL,
    event_type_id integer NOT NULL,
    CONSTRAINT event_event_types_junction_pkey PRIMARY KEY (event_id, event_type_id)
);

CREATE TABLE IF NOT EXISTS public.event_images
(
    id serial NOT NULL,
    event_id integer NOT NULL,
    headline boolean NOT NULL DEFAULT false,
    url character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT event_images_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.event_types
(
    id serial NOT NULL,
    type character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT event_types_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.events
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    start_date date NOT NULL,
    end_date date NOT NULL,
    city character varying(100) COLLATE pg_catalog."default" NOT NULL,
    province_id integer NOT NULL,
    event_website character varying(1000) COLLATE pg_catalog."default",
    organizer character varying(100) COLLATE pg_catalog."default" NOT NULL,
    active boolean NOT NULL DEFAULT true,
    map_link character varying(1000) COLLATE pg_catalog."default",
    multi_day boolean NOT NULL DEFAULT false,
    featured boolean NOT NULL DEFAULT false,
    CONSTRAINT events_pkey PRIMARY KEY (id),
    CONSTRAINT events_name_start_date_key UNIQUE (name, start_date)
);

CREATE TABLE IF NOT EXISTS public.provinces
(
    id serial NOT NULL,
    p_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT provinces_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.event_distances
    ADD CONSTRAINT event_distances_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.event_event_types_junction
    ADD CONSTRAINT event_event_types_junction_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.event_event_types_junction
    ADD CONSTRAINT event_event_types_junction_event_type_id_fkey FOREIGN KEY (event_type_id)
    REFERENCES public.event_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.event_images
    ADD CONSTRAINT event_images_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.events
    ADD CONSTRAINT events_province_id_fkey FOREIGN KEY (province_id)
    REFERENCES public.provinces (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;



----------------------------------------
-- Create the trigger function
CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.update_date = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the trigger on the users table
CREATE TRIGGER set_update_timestamp
BEFORE UPDATE ON public.users
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();

-- index
CREATE INDEX idx_events_event_type_id ON public.events(event_type_id);
CREATE INDEX idx_event_images_event_id ON public.event_images(event_id);
CREATE INDEX idx_event_distances_event_id ON public.event_distances(event_id);
CREATE INDEX idx_errors_event_name ON public.errors(event_name);
CREATE INDEX idx_errors_run_date ON public.errors(run_date);
CREATE INDEX idx_errors_inserted ON public.errors(inserted);
----------------------------------------


------------------------------------------------------------
--seeding

-- Seed event_types
INSERT INTO public.event_types (type) VALUES
('XCO'),
('Marathon/Half-marathon'),
('Ultra-marathon'),
('Stage Race'),
('Gravel'),
('24-Hour'),
('Ultra-endurance'),
('Enduro'),
('Downhill'),
('Half-marathon');

INSERT INTO public.provinces (p_name) VALUES
('Free State'),
('Gauteng'),
('KwaZulu-Natal'),
('Limpopo'),
('Mpumalanga'),
('Northern Cape'),
('North West'),
('Western Cape'),
('Eastern Cape');
------------------------------------------------------------